diff --git a/build_overrides/partition_alloc.gni b/build_overrides/partition_alloc.gni
index 56f913c7f..a7d81e7b0 100644
--- a/build_overrides/partition_alloc.gni
+++ b/build_overrides/partition_alloc.gni
@@ -11,6 +11,9 @@ _is_using_sanitizers = is_asan || is_hwasan || is_lsan || is_tsan || is_msan
 # TODO(https://crbug.com/pdfium/2068) - make work with windows.
 _use_shim = !_is_using_sanitizers && !is_win
 
+# Overriden for GDAL: _use_shim=true causes crashes at runtime
+_use_shim = false
+
 # See base/allocator/partition_allocator/external_builds.md
 use_allocator_shim_default = _use_shim
 use_partition_alloc_as_malloc_default = _use_shim
diff --git a/core/fpdfapi/page/cpdf_occontext.cpp b/core/fpdfapi/page/cpdf_occontext.cpp
index 7d2b35fa7..a18f35487 100644
--- a/core/fpdfapi/page/cpdf_occontext.cpp
+++ b/core/fpdfapi/page/cpdf_occontext.cpp
@@ -171,7 +171,7 @@ bool CPDF_OCContext::GetOCGVisible(const CPDF_Dictionary* pOCGDict) const {
   return bState;
 }
 
-bool CPDF_OCContext::CheckPageObjectVisible(const CPDF_PageObject* pObj) const {
+bool CPDF_OCContextInterface::CheckPageObjectVisible(const CPDF_PageObject* pObj) const {
   const CPDF_ContentMarks* pMarks = pObj->GetContentMarks();
   for (size_t i = 0; i < pMarks->CountItems(); ++i) {
     const CPDF_ContentMarkItem* item = pMarks->GetItem(i);
diff --git a/core/fpdfapi/page/cpdf_occontext.h b/core/fpdfapi/page/cpdf_occontext.h
index c0012d1ec..bcd2dd7a9 100644
--- a/core/fpdfapi/page/cpdf_occontext.h
+++ b/core/fpdfapi/page/cpdf_occontext.h
@@ -19,14 +19,20 @@ class CPDF_Dictionary;
 class CPDF_Document;
 class CPDF_PageObject;
 
-class CPDF_OCContext final : public Retainable {
+class CPDF_OCContextInterface : public Retainable {
+ public:
+  virtual ~CPDF_OCContextInterface() = default;
+  virtual bool CheckOCGDictVisible(const CPDF_Dictionary* pOCGDict) const = 0;
+  bool CheckPageObjectVisible(const CPDF_PageObject* pObj) const;
+};
+
+class CPDF_OCContext final : public CPDF_OCContextInterface {
  public:
   enum UsageType { kView = 0, kDesign, kPrint, kExport };
 
   CONSTRUCT_VIA_MAKE_RETAIN;
 
-  bool CheckOCGDictVisible(const CPDF_Dictionary* pOCGDict) const;
-  bool CheckPageObjectVisible(const CPDF_PageObject* pObj) const;
+  bool CheckOCGDictVisible(const CPDF_Dictionary* pOCGDict) const override;
 
  private:
   CPDF_OCContext(CPDF_Document* pDoc, UsageType eUsageType);
diff --git a/core/fpdfapi/render/cpdf_renderoptions.h b/core/fpdfapi/render/cpdf_renderoptions.h
index 12eb91ad8..462b5c827 100644
--- a/core/fpdfapi/render/cpdf_renderoptions.h
+++ b/core/fpdfapi/render/cpdf_renderoptions.h
@@ -72,7 +72,7 @@ class CPDF_RenderOptions {
   void SetDrawAnnots(bool draw) { m_bDrawAnnots = draw; }
   bool GetDrawAnnots() const { return m_bDrawAnnots; }
 
-  void SetOCContext(RetainPtr<CPDF_OCContext> context) {
+  void SetOCContext(RetainPtr<CPDF_OCContextInterface> context) {
     m_pOCContext = context;
   }
 
@@ -81,7 +81,7 @@ class CPDF_RenderOptions {
   bool m_bDrawAnnots = false;
   Options m_Options;
   ColorScheme m_ColorScheme = {};
-  RetainPtr<CPDF_OCContext> m_pOCContext;
+  RetainPtr<CPDF_OCContextInterface> m_pOCContext;
 };
 
 #endif  // CORE_FPDFAPI_RENDER_CPDF_RENDEROPTIONS_H_
diff --git a/core/fxge/BUILD.gn b/core/fxge/BUILD.gn
index a3d2b0e16..075130b23 100644
--- a/core/fxge/BUILD.gn
+++ b/core/fxge/BUILD.gn
@@ -161,7 +161,7 @@ source_set("fxge") {
     sources += [ "linux/fx_linux_impl.cpp" ]
   }
 
-  if (is_mac) {
+  if (is_mac || is_ios) {
     sources += [
       "apple/fx_apple_impl.cpp",
       "apple/fx_apple_platform.cpp",
diff --git a/core/fxge/agg/fx_agg_driver.cpp b/core/fxge/agg/fx_agg_driver.cpp
index e1fd404f0..47cbf6652 100644
--- a/core/fxge/agg/fx_agg_driver.cpp
+++ b/core/fxge/agg/fx_agg_driver.cpp
@@ -988,7 +988,7 @@ void CFX_AggDeviceDriver::InitPlatform() {}
 void CFX_AggDeviceDriver::DestroyPlatform() {}
 
 bool CFX_AggDeviceDriver::DrawDeviceText(
-    pdfium::span<const TextCharPos> pCharPos,
+    const pdfium::span<const TextCharPos>& pCharPos,
     CFX_Font* pFont,
     const CFX_Matrix& mtObject2Device,
     float font_size,
diff --git a/core/fxge/agg/fx_agg_driver.h b/core/fxge/agg/fx_agg_driver.h
index 523bb0ca9..9452a3ab4 100644
--- a/core/fxge/agg/fx_agg_driver.h
+++ b/core/fxge/agg/fx_agg_driver.h
@@ -91,7 +91,7 @@ class CFX_AggDeviceDriver final : public RenderDeviceDriverIface {
                    BlendMode blend_type) override;
   bool ContinueDIBits(CFX_ImageRenderer* handle,
                       PauseIndicatorIface* pPause) override;
-  bool DrawDeviceText(pdfium::span<const TextCharPos> pCharPos,
+  bool DrawDeviceText(const pdfium::span<const TextCharPos>& pCharPos,
                       CFX_Font* pFont,
                       const CFX_Matrix& mtObject2Device,
                       float font_size,
diff --git a/core/fxge/apple/fx_apple_impl.cpp b/core/fxge/apple/fx_apple_impl.cpp
index fa397c0e1..cb46a38b0 100644
--- a/core/fxge/apple/fx_apple_impl.cpp
+++ b/core/fxge/apple/fx_apple_impl.cpp
@@ -30,39 +30,44 @@ namespace {
 void DoNothing(void* info, const void* data, size_t size) {}
 
 bool CGDrawGlyphRun(CGContextRef pContext,
-                    pdfium::span<const TextCharPos> pCharPos,
+                    const pdfium::span<const TextCharPos>& pCharPos,
                     CFX_Font* pFont,
                     const CFX_Matrix& mtObject2Device,
                     float font_size,
                     uint32_t argb) {
-  if (pCharPos.empty())
+  if (pCharPos.empty()) {
     return true;
+  }
 
   bool bNegSize = font_size < 0;
-  if (bNegSize)
+  if (bNegSize) {
     font_size = -font_size;
+  }
 
   CFX_Matrix new_matrix = mtObject2Device;
   CQuartz2D& quartz2d =
       static_cast<CApplePlatform*>(CFX_GEModule::Get()->GetPlatform())
           ->m_quartz2d;
   if (!pFont->GetPlatformFont()) {
-    if (pFont->GetPsName() == "DFHeiStd-W5")
+    if (pFont->GetPsName() == "DFHeiStd-W5") {
       return false;
+    }
 
     pFont->SetPlatformFont(quartz2d.CreateFont(pFont->GetFontSpan()));
-    if (!pFont->GetPlatformFont())
+    if (!pFont->GetPlatformFont()) {
       return false;
+    }
   }
   DataVector<uint16_t> glyph_indices(pCharPos.size());
   std::vector<CGPoint> glyph_positions(pCharPos.size());
   for (size_t i = 0; i < pCharPos.size(); i++) {
     glyph_indices[i] =
         pCharPos[i].m_ExtGID ? pCharPos[i].m_ExtGID : pCharPos[i].m_GlyphIndex;
-    if (bNegSize)
+    if (bNegSize) {
       glyph_positions[i].x = -pCharPos[i].m_Origin.x;
-    else
+    } else {
       glyph_positions[i].x = pCharPos[i].m_Origin.x;
+    }
     glyph_positions[i].y = pCharPos[i].m_Origin.y;
   }
   if (bNegSize) {
@@ -100,14 +105,15 @@ void CFX_AggDeviceDriver::DestroyPlatform() {
 }
 
 bool CFX_AggDeviceDriver::DrawDeviceText(
-    pdfium::span<const TextCharPos> pCharPos,
+    const pdfium::span<const TextCharPos>& pCharPos,
     CFX_Font* pFont,
     const CFX_Matrix& mtObject2Device,
     float font_size,
     uint32_t argb,
     const CFX_TextRenderOptions& /*options*/) {
-  if (!pFont)
+  if (!pFont) {
     return false;
+  }
 
   bool bBold = pFont->IsBold();
   if (!bBold && pFont->GetSubstFont() &&
@@ -116,12 +122,14 @@ bool CFX_AggDeviceDriver::DrawDeviceText(
     return false;
   }
   for (const auto& cp : pCharPos) {
-    if (cp.m_bGlyphAdjust)
+    if (cp.m_bGlyphAdjust) {
       return false;
+    }
   }
   CGContextRef ctx = CGContextRef(m_pPlatformGraphics);
-  if (!ctx)
+  if (!ctx) {
     return false;
+  }
 
   CGContextSaveGState(ctx);
   CGContextSetTextDrawingMode(ctx, kCGTextFillClip);
@@ -146,15 +154,17 @@ bool CFX_AggDeviceDriver::DrawDeviceText(
     rect_cg = CGRectMake(0, 0, m_pBitmap->GetWidth(), m_pBitmap->GetHeight());
   }
   rect_cg = CGContextConvertRectToDeviceSpace(ctx, rect_cg);
-  if (pImageCG)
+  if (pImageCG) {
     CGContextClipToMask(ctx, rect_cg, pImageCG);
-  else
+  } else {
     CGContextClipToRect(ctx, rect_cg);
+  }
 
   bool ret =
       CGDrawGlyphRun(ctx, pCharPos, pFont, mtObject2Device, font_size, argb);
-  if (pImageCG)
+  if (pImageCG) {
     CGImageRelease(pImageCG);
+  }
   CGContextRestoreGState(ctx);
   return ret;
 }
diff --git a/core/fxge/cfx_renderdevice.cpp b/core/fxge/cfx_renderdevice.cpp
index 2280f6fe7..9dfa6b600 100644
--- a/core/fxge/cfx_renderdevice.cpp
+++ b/core/fxge/cfx_renderdevice.cpp
@@ -1004,7 +1004,7 @@ bool CFX_RenderDevice::SetBitsWithMask(const RetainPtr<CFX_DIBBase>& pBitmap,
 }
 #endif
 
-bool CFX_RenderDevice::DrawNormalText(pdfium::span<const TextCharPos> pCharPos,
+bool CFX_RenderDevice::DrawNormalText(const pdfium::span<const TextCharPos>& pCharPos,
                                       CFX_Font* pFont,
                                       float font_size,
                                       const CFX_Matrix& mtText2Device,
diff --git a/core/fxge/cfx_renderdevice.h b/core/fxge/cfx_renderdevice.h
index 8e6e38014..118055ba8 100644
--- a/core/fxge/cfx_renderdevice.h
+++ b/core/fxge/cfx_renderdevice.h
@@ -153,7 +153,7 @@ class CFX_RenderDevice {
                             BlendMode blend_mode);
   bool ContinueDIBits(CFX_ImageRenderer* handle, PauseIndicatorIface* pPause);
 
-  bool DrawNormalText(pdfium::span<const TextCharPos> pCharPos,
+  bool DrawNormalText(const pdfium::span<const TextCharPos>& pCharPos,
                       CFX_Font* pFont,
                       float font_size,
                       const CFX_Matrix& mtText2Device,
diff --git a/core/fxge/renderdevicedriver_iface.cpp b/core/fxge/renderdevicedriver_iface.cpp
index b549ea256..c4c00257b 100644
--- a/core/fxge/renderdevicedriver_iface.cpp
+++ b/core/fxge/renderdevicedriver_iface.cpp
@@ -50,7 +50,7 @@ bool RenderDeviceDriverIface::ContinueDIBits(CFX_ImageRenderer* handle,
 }
 
 bool RenderDeviceDriverIface::DrawDeviceText(
-    pdfium::span<const TextCharPos> pCharPos,
+    const pdfium::span<const TextCharPos>& pCharPos,
     CFX_Font* pFont,
     const CFX_Matrix& mtObject2Device,
     float font_size,
diff --git a/core/fxge/renderdevicedriver_iface.h b/core/fxge/renderdevicedriver_iface.h
index 09dd93cc0..ad88401f8 100644
--- a/core/fxge/renderdevicedriver_iface.h
+++ b/core/fxge/renderdevicedriver_iface.h
@@ -96,7 +96,7 @@ class RenderDeviceDriverIface {
                            BlendMode blend_type) = 0;
   virtual bool ContinueDIBits(CFX_ImageRenderer* handle,
                               PauseIndicatorIface* pPause);
-  virtual bool DrawDeviceText(pdfium::span<const TextCharPos> pCharPos,
+  virtual bool DrawDeviceText(const pdfium::span<const TextCharPos>& pCharPos,
                               CFX_Font* pFont,
                               const CFX_Matrix& mtObject2Device,
                               float font_size,
diff --git a/core/fxge/win32/cgdi_printer_driver.cpp b/core/fxge/win32/cgdi_printer_driver.cpp
index 28bc516bc..fbd312c8b 100644
--- a/core/fxge/win32/cgdi_printer_driver.cpp
+++ b/core/fxge/win32/cgdi_printer_driver.cpp
@@ -155,7 +155,7 @@ bool CGdiPrinterDriver::StartDIBits(const RetainPtr<CFX_DIBBase>& pSource,
 }
 
 bool CGdiPrinterDriver::DrawDeviceText(
-    pdfium::span<const TextCharPos> pCharPos,
+    const pdfium::span<const TextCharPos>& pCharPos,
     CFX_Font* pFont,
     const CFX_Matrix& mtObject2Device,
     float font_size,
diff --git a/core/fxge/win32/cgdi_printer_driver.h b/core/fxge/win32/cgdi_printer_driver.h
index 5c4cfc067..3e0551957 100644
--- a/core/fxge/win32/cgdi_printer_driver.h
+++ b/core/fxge/win32/cgdi_printer_driver.h
@@ -43,7 +43,7 @@ class CGdiPrinterDriver final : public CGdiDeviceDriver {
                    const FXDIB_ResampleOptions& options,
                    std::unique_ptr<CFX_ImageRenderer>* handle,
                    BlendMode blend_type) override;
-  bool DrawDeviceText(pdfium::span<const TextCharPos> pCharPos,
+  bool DrawDeviceText(const pdfium::span<const TextCharPos>& pCharPos,
                       CFX_Font* pFont,
                       const CFX_Matrix& mtObject2Device,
                       float font_size,
diff --git a/core/fxge/win32/cps_printer_driver.cpp b/core/fxge/win32/cps_printer_driver.cpp
index f30b80ddb..ef12db962 100644
--- a/core/fxge/win32/cps_printer_driver.cpp
+++ b/core/fxge/win32/cps_printer_driver.cpp
@@ -201,7 +201,7 @@ bool CPSPrinterDriver::StartDIBits(const RetainPtr<CFX_DIBBase>& pBitmap,
 }
 
 bool CPSPrinterDriver::DrawDeviceText(
-    pdfium::span<const TextCharPos> pCharPos,
+    const pdfium::span<const TextCharPos>& pCharPos,
     CFX_Font* pFont,
     const CFX_Matrix& mtObject2Device,
     float font_size,
diff --git a/core/fxge/win32/cps_printer_driver.h b/core/fxge/win32/cps_printer_driver.h
index 4e2849760..8f32e0033 100644
--- a/core/fxge/win32/cps_printer_driver.h
+++ b/core/fxge/win32/cps_printer_driver.h
@@ -67,7 +67,7 @@ class CPSPrinterDriver final : public RenderDeviceDriverIface {
                    const FXDIB_ResampleOptions& options,
                    std::unique_ptr<CFX_ImageRenderer>* handle,
                    BlendMode blend_type) override;
-  bool DrawDeviceText(pdfium::span<const TextCharPos> pCharPos,
+  bool DrawDeviceText(const pdfium::span<const TextCharPos>& pCharPos,
                       CFX_Font* pFont,
                       const CFX_Matrix& mtObject2Device,
                       float font_size,
diff --git a/core/fxge/win32/ctext_only_printer_driver.cpp b/core/fxge/win32/ctext_only_printer_driver.cpp
index 7689f3f3c..b6ae57ff0 100644
--- a/core/fxge/win32/ctext_only_printer_driver.cpp
+++ b/core/fxge/win32/ctext_only_printer_driver.cpp
@@ -125,7 +125,7 @@ bool CTextOnlyPrinterDriver::StartDIBits(
 }
 
 bool CTextOnlyPrinterDriver::DrawDeviceText(
-    pdfium::span<const TextCharPos> pCharPos,
+    const pdfium::span<const TextCharPos>& pCharPos,
     CFX_Font* pFont,
     const CFX_Matrix& mtObject2Device,
     float font_size,
diff --git a/core/fxge/win32/ctext_only_printer_driver.h b/core/fxge/win32/ctext_only_printer_driver.h
index e029a7cc4..93b1760dc 100644
--- a/core/fxge/win32/ctext_only_printer_driver.h
+++ b/core/fxge/win32/ctext_only_printer_driver.h
@@ -58,7 +58,7 @@ class CTextOnlyPrinterDriver final : public RenderDeviceDriverIface {
                    const FXDIB_ResampleOptions& options,
                    std::unique_ptr<CFX_ImageRenderer>* handle,
                    BlendMode blend_type) override;
-  bool DrawDeviceText(pdfium::span<const TextCharPos> pCharPos,
+  bool DrawDeviceText(const pdfium::span<const TextCharPos>& pCharPos,
                       CFX_Font* pFont,
                       const CFX_Matrix& mtObject2Device,
                       float font_size,
